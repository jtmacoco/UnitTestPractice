        -:    0:Source:PracticeTest.cpp
        -:    0:Graph:PracticeTest.gcno
        -:    0:Data:PracticeTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * Unit Tests for Practice class
        -:    3:**/
        -:    4:
        -:    5:#include <gtest/gtest.h>
        -:    6:#include "Practice.h"
        -:    7:
        -:    8:class PracticeTest : public ::testing::Test
        -:    9:{
        -:   10:	protected:
        -:   11:		PracticeTest(){} //constructor runs before each test
        -:   12:		virtual ~PracticeTest(){} //destructor cleans up after tests
        -:   13:		virtual void SetUp(){} //sets up before each test (after constructor)
        -:   14:		virtual void TearDown(){} //clean up after each test, (before destructor)
        -:   15:};
        -:   16:
        5:   17:TEST(PracticeTest, smoke_test)
        -:   18:{
        1:   19:    ASSERT_TRUE(true);
        -:   20:}
        5:   21:TEST(PracticeTest,zzz_repeats){
        -:   22:	Practice testObject1;
        1:   23:	ASSERT_EQ(testObject1.count_starting_repeats("zzz"),3);
        -:   24:}
        5:   25:TEST(PracticeTest,empty){
        -:   26:	Practice testObject1;
        1:   27:	ASSERT_EQ(testObject1.count_starting_repeats(""),0);
        -:   28:}
        5:   29:TEST(PracticeTest,jjt_repeats){
        -:   30:	Practice testObject1;
        1:   31:	ASSERT_EQ(testObject1.count_starting_repeats("jjt"),2);
        -:   32:}
        5:   33:TEST(PracticeTest,abc_repeats){
        -:   34:	Practice testObject1;
        1:   35:	ASSERT_EQ(testObject1.count_starting_repeats("abc"),0);
        -:   36:}
        5:   37:TEST(PracticeTest,pal){
        -:   38:	Practice testObject2;
        1:   39:	ASSERT_EQ(testObject2.isPalindrome("racecar"),true);
        -:   40:}
        5:   41:TEST(PracticeTest,pal_t){
        -:   42:	Practice testObject2;
        1:   43:	ASSERT_EQ(testObject2.isPalindrome("tttt"),true);
        -:   44:}
        5:   45:TEST(PracticeTest,pal_cars){
        -:   46:	Practice testObject2;
        1:   47:	ASSERT_EQ(testObject2.isPalindrome("cars"),false);
        -:   48:}
        5:   49:TEST(PracticeTest,pal_empty){
        -:   50:	Practice testObject2;
        1:   51:	ASSERT_EQ(testObject2.isPalindrome(""),true);
        -:   52:}
        5:   53:TEST(PracticeTest,accending){
        -:   54:	Practice testObject3;
        1:   55:	int a = 1;
        1:   56:	int b = 2;
        1:   57:	int c = 3;
        1:   58:	testObject3.sortDescending(a,b,c);
        1:   59:	ASSERT_EQ(a,3);
        1:   60:	ASSERT_EQ(b,2);
        1:   61:	ASSERT_EQ(c,1);
        -:   62:}
        5:   63:TEST(PracticeTest,three_same){
        -:   64:	Practice testObject4;
        1:   65:	int a = 5;
        1:   66:	int b = 5;
        1:   67:	int c = 5;
        1:   68:	testObject4.sortDescending(a,b,c);
        1:   69:	ASSERT_EQ(a,5);
        1:   70:	ASSERT_EQ(b,5);
        1:   71:	ASSERT_EQ(c,5);
        -:   72:}
        5:   73:TEST(PracticeTest,two_same){
        -:   74:	Practice testObject4;
        1:   75:	int a = 1;
        1:   76:	int b = 5;
        1:   77:	int c = 5;
        1:   78:	testObject4.sortDescending(a,b,c);
        1:   79:	ASSERT_EQ(a,5);
        1:   80:	ASSERT_EQ(b,5);
        1:   81:	ASSERT_EQ(c,1);
        -:   82:}
        5:   83:TEST(PracticeTest,middle){
        -:   84:	Practice testObject4;
        1:   85:	int a = 1;
        1:   86:	int b = 5;
        1:   87:	int c = 3;
        1:   88:	testObject4.sortDescending(a,b,c);
        1:   89:	ASSERT_EQ(a,5);
        1:   90:	ASSERT_EQ(b,3);
        1:   91:	ASSERT_EQ(c,1);
        3:   92:}
        -:   93:
